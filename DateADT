#include <iostream>
using namespace std;
class Date
{
	bool Date::isLeapYear()
	{
		if (year % 400 == 0 || (year % 100 != 0 && year % 4 == 0))
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	Date::Date()
	{
		day = 1;
		month = 1;
		year = 1500;
	}
	Date::Date(int d, int m, int y) :Date()
	{
		if ((d >= 1 && d < daysInMonth[month]) || (m >= 1 && m <= 12) || (y >= 1500 && y <= 3100))
		{
			day = d;
			month = m;
			year = y;
		}

	}
	/*Date::Date(int m, int d, int y)
	{
		if (((m >= 1 && m <= 12) || d >= 1 && d <= 31)||  (y >= 1500 && y <= 3000))
		{
			month = m;
			day = d;
			year = y;
		}

	}*/
	void Date::setDay(int d)
	{
		if (month == 2)
		{
			if (isLeapYear())
			{
				if (d >= 1 && d <= 29)
				{
					day = d;
				}
			}
			else
			{
				if (d >= 1 && d <= 28)
				{
					day = d;
				}
			}
		}
		else if (d >= 1 && d <= daysInMonth[month])
		{
			day = d;
		}

	}
	void Date::setMonth(int m)
	{
		if (m >= 1 && m <= 12)
		{
			month = m;
		}
	}
	void Date::setYear(int y)
	{
		if (y >= 1500 && y <= 3000)
		{
			year = y;
		}
	}
	void Date::setdate(int d, int m, int y)
	{
		setDay(d);
		setMonth(m);
		setYear(y);
	}
	int Date::getDay() const
	{
		return day;
	}
	int Date::getMonth()const
	{
		return month;
	}
	int Date::getYear()const
	{
		return year;
	}
	void Date::printFormat1() const
	{
		cout << month << "/" << day << "/" << year;
	}
	void Date::printFormat2() const
	{
		const char* monthNames[13] = { "","January","February","March","April","May","June","july","August","September","october","November","december" };
		cout << monthNames[month] << day << "," << year;
	}
	void Date::printFormat3() const
	{
		const char* monthNames[13] = { "","jan","feb","mar","apr","may","jun""jul","aug","sep","oct","nov","dec" };
		cout << day << "-" << monthNames[month] << "-" << year;
	}
	void Date::incYear(int y)
	{
		year = year + y;
	}
	void Date::incMonth(int m)
	{
		month = month + m;
		if (month >= 12)
		{
			incYear(month / 12);
			month = (month % 12 == 0) ? 1 : month % 12;
		}

	}
	void Date::incDay(int d)
	{
		day = day + d;
		if (month == 2)
		{
			if (isLeapYear())
			{
				if (day >= 29)
				{
					incMonth(day / 29);
					day = (day % 29 == 0) ? 1 : day % 29;

				}
			}
			else
			{
				if (day >= 28)
				{
					incMonth(day / 28);
					day = (day % 28 == 0) ? 1 : day % 28;
				}
			}
		}
		else
		{
			if (day >= daysInMonth[month])
			{
				incMonth(day / daysInMonth[month]);
				day = (day % daysInMonth[month] == 0) ? 1 : day % daysInMonth[month];
			}
		}
	}
	void Date::printDateFormat1()
	{
		switch (month)
		{
		case 1:
			cout << day << "jan" << year;
			break;
		case 2:
			cout << day << "feb" << year;
			break;
		case 3:
			cout << day << "mar" << year;
			break;
		case 4:
			cout << day << "apr" << year;
			break;
		case 5:
			cout << day << "may" << year;
			break;
		case 6:
			cout << day << "jun" << year;
			break;
		case 7:
			cout << day << "jul" << year;
			break;
		case 8:
			cout << day << "aug" << year;
			break;
		case 9:
			cout << day << "sep" << year;
			break;
		case 10:
			cout << day << "oct" << year;
			break;
		case 11:
			cout << day << "nov" << year;
			break;
		case 12:
			cout << day << "dec" << year;
			break;
		}
	}
	Date Date::getPreviousDate()
	{
		Date d1;
		if (day > 1)
		{
			d1.day = day - 1;
			d1.month = month;
			d1.year = year;
		}
		else if (day == 1 && (month == 4 || month == 6 || month == 9 || month == 11))
		{
			d1.day = 31;
			d1.month = month - 1;
			d1.year = year;
		}
		else if (day == 1 && (month == 5 || month == 7 || month == 8 || month == 10 || month == 12))
		{
			d1.day = 30;
			d1.month = month - 1;
			d1.year = year;
		}
		else if (month == 1 && day == 1)
		{
			d1.day = 31;
			d1.month = 12;
			d1.year = year - 1;
		}
		else if (month == 3)
		{
			if (day == 1 && isLeapYear())
			{
				d1.day = 29;
				d1.month = month - 1;
				d1.year = year;
			}
			else if (day == 1 && !isLeapYear())
			{
				d1.day = 28;
				d1.month = month - 1;
				d1.year = year;
			}
		}
		return d1;
	}
};
